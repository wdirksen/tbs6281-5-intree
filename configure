#!/bin/bash

die_unknown(){
    echo -en "
\E[1;33;44mUnknown option \"$1\".\E[0m

"
    ./configure --help
    exit 1
}

die(){
    echo -en "
\E[1;33;44m$1, aborting...\E[0m

"
    exit 1
}

confirmyes(){
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [Y/n]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        [nN][oO]|[nN])
            false
            ;;
        *)
            true
            ;;
    esac
}

show_help(){
  echo " Usage: ./configure --opt=<opt>"
  echo "                        "
  echo " Options: [default], if any, in brackets after option."
  echo "                        "
  echo " --help                 Print this message"
  echo "                        "
  echo " --vanilla=<bool>       Set vanilla kernel to use,"
  echo "                        like 3.19-rc1"
  echo "                        "
  echo " --linux_next=<opt>     [no] yes: compile a kernel from"
  echo "                        current linux-next git repo."
  echo "                        Using linux-next disables --vanilla"
  echo "                        "
  echo " --update=<opt>         [yes] no: don't clean local clone and"
  echo "                        don't pull in any updates."
  echo "                        "
  echo " --sysupdate=<opt>      [yes] no: don't do apt-update and friends."
  echo "                        "
  echo " --dvb_t=<opt>          [no] yes: force si2168 into dvb-t mode"
  echo "                        "
  echo " --dvb_c=<opt>          [yes] no: don't force si2168 into dvb-c mode"
  echo "                        "
  echo " --dvb_core=<opt>          [yes] no: don't force si2168 into dvb-c mode"
  echo "                        "
  exit 0
}

vanilla_opt=""
linuxnext_opt="no"
update_opt="yes"
sysupdate_opt="yes"
dvbt_opt="no"
dvbc_opt="yes"
dvbcore_opt="yes"

for opt do
  optval="${opt#*=}"
  case "$opt" in
  --vanilla=*) vanilla_opt="$optval"
  ;;
  --linux_next=*) linuxnext_opt="$optval"; vanilla_opt=""
  ;;
  --update=*) update_opt="$optval"
  ;;
  --sysupdate=*) sysupdate_opt="$optval"
  ;;
  --dvb_t=*) dvbc_opt="no"; dvbt_opt="$optval"
  ;;
  --dvb_c=*) dvbc_opt="$optval"
  ;;
  --dvb_core=*) dvbcore_opt="$optval"
  ;;
  --help) show_help
  ;;
  *)
  die_unknown $opt
  ;;
  esac
done

OS=$( lsb_release -si )
RELEASE=$( lsb_release -sc )

if ! [ "$OS" = Debian -o "$OS" = Ubuntu ] ; then
  echo -en "
\E[1;33;44m
Your operating system is not supported.

Should be Debian or Ubuntu.

Aborting...
\E[0m

"
  exit 0
fi

# Make sure that we are running as root

if ! echo "$(whoami)" | grep "root" > /dev/null 2>&1; then
  if [ "$OS" = Debian ]; then
    echo -en "
\E[1;33;44m
You should run as root.

Aborting...
\E[0m

"
    exit 0
  else
    echo -en "
\E[1;33;44m
You should run as root.

Do \"sudo su\" and run me again.

Aborting...
\E[0m

"
    exit 0
  fi
fi

# Install dependencies for building the kernel
apt-get build-dep linux --no-install-recommends -y || die "Error installing \"build-dep linux\""

apt-get install kernel-package bin86 devscripts binutils-dev crash libncurses5-dev libnuma-dev libperl-dev makedumpfile libelf-dev python-six initramfs-tools git-core libfile-fcntllock-perl --no-install-recommends -y || die "Error installing build dependencies"

# Check git status
if [ "x$update_opt" = "xyes" ]; then
  git clean -xfd > /dev/null
  git reset --hard HEAD > /dev/null
  rm -rf linux*
  git remote update > /dev/null 2>&1
  if ! [ "$?" -eq 0 ]; then
    echo -en "
\E[1;33;44m
###################################

Error(s) encountered while updating

the status from remote git repo.

Aborting...

####################################
\E[0m
"
    exit 1
  fi
  LOCAL=$(git rev-parse @{0})
  REMOTE=$(git rev-parse @{u})
  BASE=$(git merge-base @{0} @{u})

  if [ $LOCAL = $REMOTE ]; then
    GITSTATUS="0"    # "Up-to-date"
  elif [ $LOCAL = $BASE ]; then
    GITSTATUS="1"    # "Need to pull"
  elif [ $REMOTE = $BASE ]; then
    GITSTATUS="2"    # "Need to push"
  else
    GITSTATUS="3"    # "Diverged"
  fi
  if [ "$GITSTATUS" -eq "0" ]; then
    echo "
Your local clone is clean and up-to-date
"
    sleep 3
  elif [ "$GITSTATUS" -eq "1" ]; then
    echo "
Going to sync your local clone with updated remote repo.
"
    sleep 3
    git pull > /dev/null
    if ! [ "$?" -eq 0 ]; then
      echo -en "
\E[1;33;44m
###################################

Error(s) encountered while syncing

local with remote repo

Aborting...

####################################
\E[0m
"
      exit 1
    else
      echo -en "
\E[1;33;44m
###################################################

Synced with remote repo successfully! Please rerun

./configure to complete installation of drivers.

Arrow up and enter will get you there.

####################################################
\E[0m
"
      exit 0
    fi
  elif [ "$GITSTATUS" -eq "2" -o "$GITSTATUS" -eq "3" ]; then
    echo -en "
\E[1;33;44m
#####################################

Your local clone cannot be synced

with remote repo due to local changes

Aborting...

######################################
\E[0m
"
    exit 1
  fi    
fi

#
# Check for minimum supported kernel version to build with
# (should be 3.19-rc1 or up)
#
MINVERSION="19"
VERSION=$( echo "$vanilla_opt" | cut -d'.' -f2 | cut -d'-' -f1 )

if [ "x$vanilla_opt" != "x" ]; then
  if [ "$VERSION" -lt "$MINVERSION" ]; then
    echo -en "
\E[1;33;44m
This TBS6281/6285 driver is supported intree as of 3.19.x kernels.

You requested a build with a $vanilla_opt kernel.

Aborting...
\E[0m

"
    exit 0
  fi
elif [ "x$linuxnext_opt" = "x" ]; then
  echo -en "
\E[1;33;44m
You did not enter a kernel version to use.

Please use the --vanilla=<opt> or --linux_next=yes option.

Aborting...
\E[0m

"
  sleep 5
  ./configure --help
  exit 0
fi

# Get kernel version numbers

SHORT_KERNEL=$( echo `uname -r` | grep -o '[[:digit:]]\+\.[[:digit:]]\+' )
FIRST_DIGIT=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n1 )
SECOND_DIGIT=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n2 | awk 'NR==2' )
PATCHLEVEL=$( echo `uname -r` | grep -o '[[:digit:]]\+' | head -n3 | awk 'NR==3' )

# Get the system up-to-date
if [ "x$sysupdate_opt" = "xyes" ]; then
  apt-get update && apt-get dist-upgrade -y || die "Error(s) while updating your system"
fi

# Get the linux source
if [ "x$linuxnext_opt" = "xyes" ]; then
  git clone --depth=1 git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git ./linux
elif ! echo "$vanilla_opt" | grep "rc" > /dev/null 2>&1; then 
  wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-$vanilla_opt.tar.xz
else
  wget https://www.kernel.org/pub/linux/kernel/v3.x/testing/linux-$vanilla_opt.tar.xz
fi

if ! [ "$?" -eq 0 ]; then
  echo -en "
\E[1;33;44m
Failed to download requested  $vanilla_opt.tar.xz file,
or failed to clone linux-next git repo.

Aborting...
\E[0m

"
  exit 1
fi

if [ "x$linuxnext_opt" = "xyes" ]; then
  cd linux
else
  tar -xJf linux-$vanilla_opt.tar.xz && cd linux*
fi

# Patch it for use with FFdecsawrapper
if [ "x$dvbcore_opt" = "xyes" ]; then
  patch -p0 < ../dvb-core.patch
fi

# Add TBS drivers to the kernel

mkdir drivers/media/pci/saa716x
cp -f ../drivers/media/pci/saa716x/* drivers/media/pci/saa716x/
patch -p0 < ../Kconfig.patch
patch -p0 < ../Makefile.patch
patch -p0 < ../uapi.patch


if [ "$VERSION" = "19" ]; then
  patch -p0 < ../silabs-3.19.patch
  patch -p0 < ../cx23885.patch
fi

# Patch to force driver into DVB-C mode
if [ "x$dvbc_opt" = "xyes" ]; then
  echo "
Setting silabs frontend (si2168) permanently to DVB-C mode, as requested.
"
  sed -i 's/SYS_DVBT, SYS_DVBT2, SYS_DVBC_ANNEX_A/SYS_DVBC_ANNEX_A/' drivers/media/dvb-frontends/si2168.c
elif [ "x$dvbt_opt" = "xyes" ]; then
  echo "
Setting silabs frontend (si2168) permanently to DVB-T mode, as requested.
"
  sed -i 's/SYS_DVBT, SYS_DVBT2, SYS_DVBC_ANNEX_A/SYS_DVBT/' drivers/media/dvb-frontends/si2168.c
fi

if [ "$OS" = Debian ] ; then
  echo -en "
Going to configure your kernel.

"

  if [ "$VERSION" = "19" ]; then
    echo -en "
Choise: use supplied config file or
do 'make oldconfig'. Do you want to
use supplied kernel config?
If you hit 'n', 'make oldconfig' starts.

"
    confirmyes "Yes, use it. [Y/n]"

    if [ "$?" -eq 0 ]; then
      cp -f ../kernelconfig/amd64/3.19/config ./.config
    else
    make oldconfig
    # Change the max num of DVB adapters
    echo -en "
\E[1;33;44m
If you are going to use >4 dvb adapters with
FFdecsawrapper, make sure your kernel supports it.
\E[0m

Want to use 'make menuconfig for it?

"
    confirmyes "Yes, please do. [Y/n]"
      if [ "$?" -eq 0 ]; then
        make menuconfig
      fi
    fi
  else
    make oldconfig
    # Change the max num of DVB adapters
    echo -en "
\E[1;33;44m
If you are going to use >4 dvb adapters with
FFdecsawrapper, make sure your kernel supports it.
\E[0m

Want to use 'make menuconfig for it?

"
    confirmyes "Yes, please do. [Y/n]"
    if [ "$?" -eq 0 ]; then
      make menuconfig
    fi
  fi


  make-kpkg --rootcmd fakeroot clean
  export CONCURRENCY_LEVEL=3
  make-kpkg --rootcmd fakeroot --initrd kernel_image > ../build.log
  if [ "$?" -eq 0 ]; then
    cd ..
    dpkg -i *.deb
  else
    echo -en "
\E[1;33;44m
Your kernel did  not compile as it should.
\E[0m

Aborting...

"
    exit 1
  fi
fi

# Install the firmware
if [ ! -d /lib/firmware ]; then
  mkdir /lib/firmware
fi

cp -f firmware/* /lib/firmware/

# Set msi mode

echo "options saa716x_budget int_type=1" > /etc/modprobe.d/tbs_opensource.conf

